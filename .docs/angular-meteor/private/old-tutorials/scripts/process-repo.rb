#! /usr/bin/env ruby

require 'json'

# Goal: go through a repository, parse titles of the form:
# Step 8.2: Step content
# 
# Generate a dictionary where the keys are step numbers,
# and the values are the title of the commit and the sha of the commit
# 
# Output a file with VAR_NAME = <JSON blob> that can be included in this
# package

# Usage: ./map-commits-to-steps.rb <repo path> <output path> <var name> <patch output>

# Methodology: calls git log and parses output

if ARGV.length < 1
  puts "Please pass the name of a view layer: blaze, angular, or react"
  exit 1
end

unless ["angular", "blaze", "react"].include? ARGV[0]
  puts "Please pass the name of a view layer: blaze, angular, or react"
  exit 1
end

view_type = ARGV[0]

tutorial_root = File.realpath(File.join File.dirname(__FILE__), "..")

repo = File.join tutorial_root, "repos", view_type
out_file = File.join tutorial_root, "generated", (view_type + "-commits.js")
out_patch_file = File.join tutorial_root, "generated", (view_type + ".multi.patch")
var_name = view_type.upcase + "_COMMITS"

Dir.chdir repo

log_output = `git log --pretty=oneline`

hash = {}

log_output.each_line do |line|
  parts = line.split
  sha = parts[0]
  maybe_step = parts[1]
  if maybe_step == "Step"
    step_number = parts[2].sub ":", ""
    message = parts.drop(3).join " "
    puts "sha: " + sha
    puts "step: " + step_number
    puts "message: " + message

    hash[step_number] = {
      "sha" => sha,
      "message" => message
    }
  end
end

File.open out_file, "w" do |file|
  file.write "// This file auto-generated by scripts/map-commits-to-steps.rb\n"
  file.write(var_name + " = " + JSON.pretty_generate(hash))
end

first_commit = log_output.lines.last.split[0]
puts "first commit: " + first_commit
puts "writing patches to: " + out_patch_file

`git format-patch --stdout #{first_commit} > #{out_patch_file}`
